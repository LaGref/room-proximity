package com.estimote.examples.demos;

import android.content.Context;
import android.graphics.Color;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.BaseAdapter;
import android.widget.TextView;

import com.estimote.examples.demos.BookingActivity.HttpAsyncTask;
import com.estimote.sdk.Beacon;
import com.estimote.sdk.Utils;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.concurrent.ExecutionException;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;


/**
 * Displays basic information about beacon.
 *
 * @author wiktor@estimote.com (Wiktor Gworek)
 */
public class LeDeviceListAdapter extends BaseAdapter {

  private ArrayList<Beacon> beacons;
  private LayoutInflater inflater;

  public LeDeviceListAdapter(Context context) {
    this.inflater = LayoutInflater.from(context);
    this.beacons = new ArrayList<Beacon>();
  }

  public void replaceWith(Collection<Beacon> newBeacons) {
    this.beacons.clear();
    this.beacons.addAll(newBeacons);
    notifyDataSetChanged();
  }

  @Override
  public int getCount() {
    return beacons.size();
  }

  @Override
  public Beacon getItem(int position) {
    return beacons.get(position);
  }

  @Override
  public long getItemId(int position) {
    return position;
  }

  @Override
  public View getView(int position, View view, ViewGroup parent) {
    view = inflateIfRequired(view, position, parent);
    bind(getItem(position), view);
    return view;
  }

  private void bind(Beacon beacon, View view) {
    ViewHolder holder = (ViewHolder) view.getTag();
    holder.macTextView.setText(String.format("MAC: %s (%.2fm)", beacon.getMacAddress(), Utils.computeAccuracy(beacon)));
    holder.majorTextView.setText("Major: " + beacon.getMajor());
    holder.minorTextView.setText("Minor: " + beacon.getMinor());
    holder.measuredPowerTextView.setText("MPower: " + beacon.getMeasuredPower());
    holder.rssiTextView.setText("RSSI: " + beacon.getRssi());
    holder.uuidTextView.setText("UUID: " + beacon.getProximityUUID());
    //beacon. 
    //beacon.get 
    //  beacon.g
    
    
    
    try {
		String beaconData = new HttpAsyncTask().execute("http://localhost:8888/" + beacon.getMajor() + "/" + beacon.getMinor()).get();
		JSONObject json = new JSONObject(beaconData);
		jBookings = json.getJSONObject("beacons");
		JSONArray bookingArray = jBookings.getJSONArray("bookingArray");
		Log.e("JSON", bookingArray.toString());

		for(int i = 0 ; i < bookingArray.length() ; i++ ){		
			listItems.add(bookingArray.getJSONObject(i));
		}

		adapter=new ArrayAdapter<JSONObject>(this, android.R.layout.simple_list_item_1,listItems);
		setListAdapter(adapter);
	
	} catch (InterruptedException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	} catch (ExecutionException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	} catch (JSONException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   
    //this shouldn't be hardcoded, we need to get this from the server!
    if(beacon.getProximityUUID() == "1")
    {
    view.setBackgroundColor(Color.rgb(60, 60, 255));
    }
    
    if(beacon.getProximityUUID() == "2")
    {
    view.setBackgroundColor(Color.rgb(50, 255, 90));
    }
    
    
    if(beacon.getProximityUUID() == "3")
    {
    view.setBackgroundColor(Color.rgb(0, 0, 255));
    }
    
    if(beacon.getProximityUUID() == "4")
    {
    view.setBackgroundColor(Color.CYAN);
    }
  }

  private View inflateIfRequired(View view, int position, ViewGroup parent) {
    if (view == null) {
      view = inflater.inflate(R.layout.device_item, null);
      view.setTag(new ViewHolder(view));
    }
    return view;
  }

  static class ViewHolder {
    final TextView macTextView;
    final TextView majorTextView;
    final TextView minorTextView;
    final TextView measuredPowerTextView;
    final TextView rssiTextView;
    final TextView uuidTextView;

    ViewHolder(View view) {
      macTextView = (TextView) view.findViewWithTag("mac");
      majorTextView = (TextView) view.findViewWithTag("major");
      minorTextView = (TextView) view.findViewWithTag("minor");
      measuredPowerTextView = (TextView) view.findViewWithTag("mpower");
      rssiTextView = (TextView) view.findViewWithTag("rssi");
      uuidTextView= (TextView) view.findViewWithTag("uuid");
    }
    
    
    
    
    
    
    
    
    
  }
}
